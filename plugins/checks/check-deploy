#!/usr/bin/env bash

# Hook to check server against list of checks specified in CHECKS file.  Each
# check is a relative path and, optionally, expected content.
#
# For example:
#   /                       My Amazing App
#   /stylesheets/index.css  .body
#   /scripts/index.js       $(function()
#   /images/logo.png
#
# Waits 5 seconds, giving server time to start, before running the checks.  For
# shorter/longer wait, change the DOKKU_CHECKS_WAIT environment variable (value
# in seconds).

set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
CONTAINERID="$1"; APP="$2"; PORT="$3" ; HOSTNAME="${4:-localhost}"

FILENAME="$DOKKU_ROOT/$APP/CHECKS"
WAIT="${DOKKU_CHECKS_WAIT:-5}"

# try to copy CHECKS from container as well. quit gracefully if it doesn't exist
if [[ ! -f "$FILENAME" ]] ; then
    echo "$FILENAME not found. attempting to retrieve it with this command: "
    echo "docker cp $CONTAINERID:/app/CHECKS $DOKKU_ROOT/$APP/"
    copy=$( docker cp $CONTAINERID:/app/CHECKS $DOKKU_ROOT/$APP/ > /dev/null 2>&1 ; echo $? )
    echo "copy exited with $copy"
    if [ $copy -ne 0 ]; then
        exit
    fi
fi

echo "Waiting $WAIT seconds ..."
sleep $WAIT

# -q           do not use .curlrc (must come first)
# --compressed Test compression handled correctly
# --fail       Fail on server errors (4xx, 5xx)
# --location   Follow redirects
CURL_OPTIONS="-H 'HOST: $APP' -q --compressed --fail --location --max-time 30"

cat "$FILENAME" | while read PATHNAME EXPECTED ; do
  # Ignore empty lines and lines starting with #
  [[ -z "$PATHNAME" || "$PATHNAME" =~ ^\# ]] && continue

  URL="http://$HOSTNAME:$PORT$PATHNAME"

  HTML=$(curl $CURL_OPTIONS $URL)
  if [[ -n "$EXPECTED" && ! "$HTML" =~ "$EXPECTED" ]] ; then
    echo -e "\033[31m\033[1m$URL: expected to but did not find: \"$EXPECTED\"\033[0m"
    exit 1
  fi
  echo -e "\033[32m\033[1m$URL => \"$EXPECTED\"\033[0m"
done

echo -e "\033[32m\033[1mAll checks successful!\033[0m"

if [ $copy -eq 0 ]; then
    rm $FILENAME
fi